/**
 * Verbwire API documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient.js";
import Error from '../model/Error.js';
import InlineResponse200 from '../model/InlineResponse200.js';
import InlineResponse2001 from '../model/InlineResponse2001.js';
import InlineResponse20010 from '../model/InlineResponse20010.js';
import InlineResponse20011 from '../model/InlineResponse20011.js';
import InlineResponse20012 from '../model/InlineResponse20012.js';
import InlineResponse20013 from '../model/InlineResponse20013.js';
import InlineResponse2002 from '../model/InlineResponse2002.js';
import InlineResponse2003 from '../model/InlineResponse2003.js';
import InlineResponse2004 from '../model/InlineResponse2004.js';
import InlineResponse2005 from '../model/InlineResponse2005.js';
import InlineResponse2006 from '../model/InlineResponse2006.js';
import InlineResponse2007 from '../model/InlineResponse2007.js';
import InlineResponse2008 from '../model/InlineResponse2008.js';
import InlineResponse2009 from '../model/InlineResponse2009.js';

/**
* Data service.
* @module api/DataApi
* @version 1.0.0
*/
export default class DataApi {

    /**
    * Constructs a new DataApi. 
    * @alias module:api/DataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the nftDataAttributesForContractAddressGet operation.
     * @callback module:api/DataApi~nftDataAttributesForContractAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attributes for contract address
     * Returns all metadata attributes for an NFT contract address
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataAttributesForContractAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20012}
     */
    nftDataAttributesForContractAddressGet(contractAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contractAddress': contractAddress,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'page': opts['page'],
        'sortField': opts['sortField'],
        'sortDirection': opts['sortDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/nft/data/attributesForContractAddress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataAttributesForSlugGet operation.
     * @callback module:api/DataApi~nftDataAttributesForSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attributes for slug
     * Returns all metadata attributes for a particular NFT project slug
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataAttributesForSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20012}
     */
    nftDataAttributesForSlugGet(slug, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'slug': slug,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'page': opts['page'],
        'sortField': opts['sortField'],
        'sortDirection': opts['sortDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/nft/data/attributesForSlug', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataAttributesWithTokensForContractAddressGet operation.
     * @callback module:api/DataApi~nftDataAttributesWithTokensForContractAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attributes (with tokens) for contract address
     * Returns all metadata attributes and corresponding token IDs for an NFT contract address
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataAttributesWithTokensForContractAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20013}
     */
    nftDataAttributesWithTokensForContractAddressGet(contractAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contractAddress': contractAddress,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'page': opts['page'],
        'sortField': opts['sortField'],
        'sortDirection': opts['sortDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/nft/data/attributesWithTokensForContractAddress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataAttributesWithTokensForSlugGet operation.
     * @callback module:api/DataApi~nftDataAttributesWithTokensForSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attributes (with tokens) for slug
     * Returns all metadata attributes and corresponding token IDs for a particular NFT project slug
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataAttributesWithTokensForSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20013}
     */
    nftDataAttributesWithTokensForSlugGet(slug, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'slug': slug,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'page': opts['page'],
        'sortField': opts['sortField'],
        'sortDirection': opts['sortDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/nft/data/attributesWithTokensForSlug', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataCollectionsAllGet operation.
     * @callback module:api/DataApi~nftDataCollectionsAllGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all indexed collections
     * Returns all collections indexed by Verbwire
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataCollectionsAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    
    nftDataCollectionsAllGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'chain': opts['chain'],
        'limit': opts['limit'],
        'page': opts['page'],
        'sortField': opts['sortField'],
        'sortInterval': opts['sortInterval'],
        'sortDirection': opts['sortDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/nft/data/collections/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataCollectionsSearchGet operation.
     * @callback module:api/DataApi~nftDataCollectionsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search all indexed collections
     * Searches all collections indexed by Verbwire for a given string
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataCollectionsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    nftDataCollectionsSearchGet(searchString, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchString': searchString,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'page': opts['page'],
        'sortField': opts['sortField'],
        'sortInterval': opts['sortInterval'],
        'sortDirection': opts['sortDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/nft/data/collections/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataCreatedGet operation.
     * @callback module:api/DataApi~nftDataCreatedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all NFTs created by a wallet address
     * Returns a list of all NFTs created by a particular wallet address
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataCreatedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    nftDataCreatedGet(walletAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'walletAddress': walletAddress,
        'chain': opts['chain']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/nft/data/created', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataFloorPricesForContractAddressGet operation.
     * @callback module:api/DataApi~nftDataFloorPricesForContractAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get floor prices for contract address
     * Returns all floor price history for an NFT project
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataFloorPricesForContractAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    nftDataFloorPricesForContractAddressGet(contractAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contractAddress': contractAddress,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortDirection': opts['sortDirection'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/nft/data/floorPricesForContractAddress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataFloorPricesForSlugGet operation.
     * @callback module:api/DataApi~nftDataFloorPricesForSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get floor prices for slug
     * Returns all floor price history for an NFT project slug
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataFloorPricesForSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    nftDataFloorPricesForSlugGet(slug, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'slug': slug,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortDirection': opts['sortDirection'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/nft/data/floorPricesForSlug', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataHistoricalStatsForContractAddressGet operation.
     * @callback module:api/DataApi~nftDataHistoricalStatsForContractAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get historical stats for contract address
     * Returns historical statistics for an NFT project
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataHistoricalStatsForContractAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2006}
     */
    nftDataHistoricalStatsForContractAddressGet(contractAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contractAddress': contractAddress,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortDirection': opts['sortDirection'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/nft/data/historicalStatsForContractAddress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataHistoricalStatsForSlugGet operation.
     * @callback module:api/DataApi~nftDataHistoricalStatsForSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get historical stats for slug
     * Returns historical statistics for an NFT project slug
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataHistoricalStatsForSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2006}
     */
    nftDataHistoricalStatsForSlugGet(slug, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'slug': slug,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortDirection': opts['sortDirection'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/nft/data/historicalStatsForSlug', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataLastFloorPriceForContractAddressGet operation.
     * @callback module:api/DataApi~nftDataLastFloorPriceForContractAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get last floor price for contract address
     * Returns the most recent floor price for an NFT
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataLastFloorPriceForContractAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    nftDataLastFloorPriceForContractAddressGet(contractAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contractAddress': contractAddress,
        'chain': opts['chain']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/nft/data/lastFloorPriceForContractAddress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataLastFloorPriceForSlugGet operation.
     * @callback module:api/DataApi~nftDataLastFloorPriceForSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get last floor price for slug
     * Returns the most recent floor price for an NFT project slug
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataLastFloorPriceForSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    nftDataLastFloorPriceForSlugGet(slug, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'slug': slug,
        'chain': opts['chain']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/nft/data/lastFloorPriceForSlug', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataNftDetailsGet operation.
     * @callback module:api/DataApi~nftDataNftDetailsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details for an NFT
     * Returns all details for an NFT
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataNftDetailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    nftDataNftDetailsGet(contractAddress, tokenId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contractAddress': contractAddress,
        'tokenId': tokenId,
        'chain': opts['chain']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/nft/data/nftDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataOwnedGet operation.
     * @callback module:api/DataApi~nftDataOwnedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all NFTs owned by a wallet address
     * Returns a list of all NFTs held within a particular wallet address
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataOwnedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    nftDataOwnedGet(walletAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'walletAddress': walletAddress,
        'chain': opts['chain']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/nft/data/owned', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataOwnershipForContractAddressGet operation.
     * @callback module:api/DataApi~nftDataOwnershipForContractAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get ownership data for contract address
     * Returns all wallets that owna particular NFT project slug
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataOwnershipForContractAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20010}
     */
    nftDataOwnershipForContractAddressGet(contractAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contractAddress': contractAddress,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'page': opts['page'],
        'sortDirection': opts['sortDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/nft/data/ownershipForContractAddress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataOwnershipForSlugGet operation.
     * @callback module:api/DataApi~nftDataOwnershipForSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get ownership data for slug
     * Returns all wallets that own a particular NFT project slug
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataOwnershipForSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20010}
     */
    nftDataOwnershipForSlugGet(slug, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'slug': slug,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'page': opts['page'],
        'sortDirection': opts['sortDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/nft/data/ownershipForSlug', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataSalesEventsForContractAddressGet operation.
     * @callback module:api/DataApi~nftDataSalesEventsForContractAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sales events for contract address
     * Returns all sales events for a particular NFT project slug
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataSalesEventsForContractAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    nftDataSalesEventsForContractAddressGet(contractAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contractAddress': contractAddress,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortDirection': opts['sortDirection'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/nft/data/salesEventsForContractAddress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataSalesEventsForSlugGet operation.
     * @callback module:api/DataApi~nftDataSalesEventsForSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sales events for slug
     * Returns all sales events for a particular NFT project slug
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataSalesEventsForSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    nftDataSalesEventsForSlugGet(slug, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'slug': slug,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortDirection': opts['sortDirection'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/nft/data/salesEventsForSlug', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataSearchAttributesInContractAddressGet operation.
     * @callback module:api/DataApi~nftDataSearchAttributesInContractAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search attributes in contract address
     * Returns all metadata attributes for an NFT contract address
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataSearchAttributesInContractAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20012}
     */
    nftDataSearchAttributesInContractAddressGet(searchString, contractAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchString': searchString,
        'contractAddress': contractAddress,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'page': opts['page'],
        'sortField': opts['sortField'],
        'sortDirection': opts['sortDirection'],
        'includeTokens': opts['includeTokens']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/nft/data/searchAttributesInContractAddress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataSearchAttributesInSlugGet operation.
     * @callback module:api/DataApi~nftDataSearchAttributesInSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search attributes in slug
     * Returns all metadata attributes for a particular NFT project slug
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataSearchAttributesInSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20012}
     */
    nftDataSearchAttributesInSlugGet(searchString, slug, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchString': searchString,
        'slug': slug,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'page': opts['page'],
        'sortField': opts['sortField'],
        'sortDirection': opts['sortDirection'],
        'includeTokens': opts['includeTokens']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/nft/data/searchAttributesInSlug', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataTransactionsByContractGet operation.
     * @callback module:api/DataApi~nftDataTransactionsByContractGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all NFTs Contract transactions by a wallet address
     * Produce a list of all NFTs transactions for a specific NFT contract within a particular wallet address
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataTransactionsByContractGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    nftDataTransactionsByContractGet(contractAddress, walletAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contractAddress': contractAddress,
        'walletAddress': walletAddress,
        'chain': opts['chain']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/nft/data/transactionsByContract', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataTransactionsGet operation.
     * @callback module:api/DataApi~nftDataTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all transactions by a wallet address
     * Returns a list of all transactions by a particular wallet address
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    nftDataTransactionsGet(walletAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'walletAddress': walletAddress,
        'chain': opts['chain']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/nft/data/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataTransferEventsForContractAddressGet operation.
     * @callback module:api/DataApi~nftDataTransferEventsForContractAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transfer events for contract address
     * Returns all transfer events for a particular NFT project slug
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataTransferEventsForContractAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2009}
     */
    nftDataTransferEventsForContractAddressGet(contractAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contractAddress': contractAddress,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'page': opts['page'],
        'sortDirection': opts['sortDirection'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/nft/data/transferEventsForContractAddress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDataTransferEventsForSlugGet operation.
     * @callback module:api/DataApi~nftDataTransferEventsForSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transfer events for slug
     * Returns all transfer events for a particular NFT project slug
     * @param {Object} opts Optional parameters
     * @param {module:api/DataApi~nftDataTransferEventsForSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2008}
     */
    nftDataTransferEventsForSlugGet(slug, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'slug': slug,
        'chain': opts['chain'],
        'limit': opts['limit'],
        'page': opts['page'],
        'sortDirection': opts['sortDirection'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/nft/data/transferEventsForSlug', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
