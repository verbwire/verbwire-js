/**
 * Verbwire API documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient.js";
import InlineResponse20014 from '../model/InlineResponse20014.js';
import InlineResponse400 from '../model/InlineResponse400.js';

/**
* CrossChainSend service.
* @module api/CrossChainSendApi
* @version 1.0.0
*/
export default class CrossChainSendApi {

    /**
    * Constructs a new CrossChainSendApi. 
    * @alias module:api/CrossChainSendApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the nftSendCrossChainSendPost operation.
     * @callback module:api/CrossChainSendApi~nftSendCrossChainSendPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send your NFT across Chains
     * Sends an NFT (minted from your created custom contract) from one block chain to another. Sending NFTs accross chains is a unique feature of Omnichain NFTs
     * @param {module:api/CrossChainSendApi~nftSendCrossChainSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20014}
     */
    nftSendCrossChainSendPost(sourceChain, destChain, tokenId, sourceWalletAddress, recipientWalletAddress, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'sourceChain': sourceChain,
        'destChain': destChain,
        'tokenId': tokenId,
        'sourceWalletAddress': sourceWalletAddress,
        'recipientWalletAddress': recipientWalletAddress
      };

      let authNames = ['APIKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/nft/send/crossChainSend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftSendEnableCrossChainSendPost operation.
     * @callback module:api/CrossChainSendApi~nftSendEnableCrossChainSendPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable Cross-chain Sends
     * Turn on the ability to send your NFT (minted with your created custom contract) across chains
     * @param {module:api/CrossChainSendApi~nftSendEnableCrossChainSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20014}
     */
    nftSendEnableCrossChainSendPost(sourceChain, destChain, sourceContractAddress, destContractAddress, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'sourceChain': sourceChain,
        'destChain': destChain,
        'sourceContractAddress': sourceContractAddress,
        'destContractAddress': destContractAddress
      };

      let authNames = ['APIKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/nft/send/enableCrossChainSend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftSendQuickSendPost operation.
     * @callback module:api/CrossChainSendApi~nftSendQuickSendPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Quick-minted NFT across Chains
     * Sends a quick-minted NFT from one block chain to another. Sending NFTs accross chains is a unique feature of Omnichain NFTs
     * @param {module:api/CrossChainSendApi~nftSendQuickSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20014}
     */
    nftSendQuickSendPost(sourceChain, destChain, tokenId, sourceWalletAddress, recipientWalletAddress, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'sourceChain': sourceChain,
        'destChain': destChain,
        'tokenId': tokenId,
        'sourceWalletAddress': sourceWalletAddress,
        'recipientWalletAddress': recipientWalletAddress
      };

      let authNames = ['APIKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/nft/send/quickSend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
