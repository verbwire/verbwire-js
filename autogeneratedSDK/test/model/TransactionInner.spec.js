/**
 * Verbwire API documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VerbwireApiDocumentation);
  }
}(this, function(expect, VerbwireApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VerbwireApiDocumentation.TransactionInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TransactionInner', function() {
    it('should create an instance of TransactionInner', function() {
      // uncomment below and update the code to test TransactionInner
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be.a(VerbwireApiDocumentation.TransactionInner);
    });

    it('should have the property blockNumber (base name: "blockNumber")', function() {
      // uncomment below and update the code to test the property blockNumber
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property timeStamp (base name: "timeStamp")', function() {
      // uncomment below and update the code to test the property timeStamp
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property hash (base name: "hash")', function() {
      // uncomment below and update the code to test the property hash
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property nonce (base name: "nonce")', function() {
      // uncomment below and update the code to test the property nonce
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property blockHash (base name: "blockHash")', function() {
      // uncomment below and update the code to test the property blockHash
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property from (base name: "from")', function() {
      // uncomment below and update the code to test the property from
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property contractAddress (base name: "contractAddress")', function() {
      // uncomment below and update the code to test the property contractAddress
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property to (base name: "to")', function() {
      // uncomment below and update the code to test the property to
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property tokenID (base name: "tokenID")', function() {
      // uncomment below and update the code to test the property tokenID
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property tokenName (base name: "tokenName")', function() {
      // uncomment below and update the code to test the property tokenName
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property tokenSymbol (base name: "tokenSymbol")', function() {
      // uncomment below and update the code to test the property tokenSymbol
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property tokenDecimal (base name: "tokenDecimal")', function() {
      // uncomment below and update the code to test the property tokenDecimal
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property transactionIndex (base name: "transactionIndex")', function() {
      // uncomment below and update the code to test the property transactionIndex
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property gas (base name: "gas")', function() {
      // uncomment below and update the code to test the property gas
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property gasPrice (base name: "gasPrice")', function() {
      // uncomment below and update the code to test the property gasPrice
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property gasUsed (base name: "gasUsed")', function() {
      // uncomment below and update the code to test the property gasUsed
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property cumulativeGasUsed (base name: "cumulativeGasUsed")', function() {
      // uncomment below and update the code to test the property cumulativeGasUsed
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property input (base name: "input")', function() {
      // uncomment below and update the code to test the property input
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

    it('should have the property confirmations (base name: "confirmations")', function() {
      // uncomment below and update the code to test the property confirmations
      //var instane = new VerbwireApiDocumentation.TransactionInner();
      //expect(instance).to.be();
    });

  });

}));
